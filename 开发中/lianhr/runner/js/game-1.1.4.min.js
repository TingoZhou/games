var tutorial = [{
		event: "speed",
		value: 500
	}, {
		event: "block",
		length: 14,
		height: 0,
		gap: 0,
		objects: " G P J   "
	}, {
		event: "block",
		length: 10,
		height: 0,
		gap: 100,
		objects: "D",
		stack: true
	}, {
		event: "block",
		length: 6,
		height: -200,
		gap: 500,
		objects: "WPPPP"
	}, {
		event: "block",
		length: 10,
		height: 100,
		gap: 200,
		objects: "GPGP",
		stack: true
	}, {
		event: "block",
		length: 6,
		height: -200,
		gap: 500,
		objects: "GGG "
	}, {
		event: "block",
		length: 3,
		height: -100,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 3,
		height: -50,
		gap: 100,
		objects: "G"
	}
];
var chubbies = [{
		event: "speed",
		value: 1000
	}, {
		event: "block",
		length: 16,
		height: 0,
		gap: 100,
		objects: ""
	}, {
		event: "block",
		length: 10,
		height: 0,
		gap: 200,
		objects: "",
		stack: true
	}, {
		event: "block",
		length: 10,
		height: 100,
		gap: 200,
		objects: "OOOPPP"
	}, {
		event: "block",
		length: 30,
		height: 50,
		gap: 200,
		objects: " M M MOR"
	}
];
var diamond_easy = [{
		event: "speed",
		value: 500
	}, {
		event: "block",
		length: 4,
		height: 60,
		gap: 150,
		stack: true,
		objects: "GP"
	}, {
		event: "block",
		length: 4,
		height: -60,
		gap: 0,
		objects: "PG"
	}, {
		event: "block",
		length: 3,
		height: 120,
		gap: 120,
		stack: true,
		objects: "PP"
	}, {
		event: "block",
		length: 3,
		height: 0,
		gap: 0,
		stack: true,
		objects: " "
	}, {
		event: "block",
		length: 3,
		height: -120,
		gap: 0,
		objects: "GG"
	}, {
		event: "block",
		length: 3,
		height: 50,
		gap: 200,
		stack: true,
		objects: "GP"
	}, {
		event: "block",
		length: 3,
		height: -50,
		gap: 0,
		objects: "PG"
	}
];
var med1 = [{
		event: "speed",
		value: 600
	}, {
		event: "block",
		length: 20,
		height: -50,
		gap: 150,
		objects: "GRGRGRGT"
	}, {
		event: "block",
		length: 10,
		height: -100,
		gap: 100,
		objects: "GGG  RR",
		stack: true
	}, {
		event: "block",
		length: 10,
		height: 0,
		gap: 300,
		objects: "   GGG"
	}, {
		event: "block",
		length: 3,
		height: -50,
		gap: 50,
		stack: true
	}, {
		event: "block",
		length: 1,
		height: 100,
		gap: 200,
		objects: "P"
	}, {
		event: "block",
		length: 3,
		height: 0,
		gap: 200
	}
];
var med2 = [{
		event: "speed",
		value: 650
	}, {
		event: "block",
		length: 19,
		height: -50,
		gap: 150,
		objects: "GRGRGRGR"
	}, {
		event: "block",
		length: 10,
		height: -100,
		gap: 100,
		objects: "GGGPRRR",
		stack: true
	}, {
		event: "block",
		length: 10,
		height: 0,
		gap: 300,
		objects: "   GGG"
	}, {
		event: "block",
		length: 3,
		height: -50,
		gap: 50,
		stack: true
	}, {
		event: "block",
		length: 1,
		height: 120,
		gap: 400,
		objects: "PP"
	}, {
		event: "block",
		length: 3,
		height: 0,
		gap: 200
	}
];
var tall_intro = [{
		event: "speed",
		value: 600
	}, {
		event: "block",
		length: 16,
		height: 0,
		gap: 150,
		objects: "GOG"
	}, {
		event: "block",
		length: 17,
		height: 0,
		gap: 150,
		objects: " OPO"
	}
];
var turbulence_intro = [{
		event: "speed",
		value: 700
	}, {
		event: "block",
		length: 10,
		height: 0,
		gap: 100,
		objects: "GGGG"
	}, {
		event: "turbulence",
		value: true
	}, {
		event: "block",
		length: 3,
		height: 0,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 3,
		height: 0,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 3,
		height: 0,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 15,
		height: 0,
		gap: 200,
		objects: "GRRG"
	}, {
		event: "block",
		length: 15,
		height: 0,
		gap: 250,
		objects: "GPOPG"
	}, {
		event: "block",
		length: 5,
		height: 50,
		gap: 200,
		objects: "GGG"
	}, {
		event: "block",
		length: 4,
		height: 50,
		gap: 100
	}, {
		event: "block",
		length: 4,
		height: 90,
		gap: 100
	}, {
		event: "block",
		length: 2,
		height: 130,
		gap: 100
	}, {
		event: "block",
		length: 10,
		height: -100,
		gap: 100,
		stack: true
	}, {
		event: "block",
		length: 5,
		height: 50,
		gap: 600,
		objects: "  PPPP"
	}, {
		event: "block",
		length: 2,
		height: -50,
		gap: 100
	}, {
		event: "turbulence",
		value: false
	}
];
var up_down = [{
		event: "speed",
		value: 700
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 100,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 100,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 100,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 100,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 100,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 100,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 100,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 100,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 100,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 100,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 100,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 100,
		objects: "G"
	}
];
var bounce = [{
		event: "speed",
		value: 800
	}, {
		event: "block",
		length: 68,
		height: 0,
		gap: 200,
		objects: " R R R R RGRGRPR R R R RPRPRB"
	}
];
var diamond_med_1000 = [{
		event: "speed",
		value: 1000
	}, {
		event: "block",
		length: 5,
		height: 0,
		gap: 200
	}, {
		event: "block",
		length: 3,
		height: 100,
		gap: 200,
		stack: true,
		objects: "GG"
	}, {
		event: "block",
		length: 3,
		height: -100,
		gap: 0,
		objects: "  "
	}, {
		event: "block",
		length: 3,
		height: 0,
		gap: 200,
		stack: true,
		objects: "PP"
	}, {
		event: "block",
		length: 3,
		height: -200,
		gap: 200,
		objects: "  "
	}, {
		event: "block",
		length: 3,
		height: 100,
		gap: 150,
		stack: true,
		objects: "GG"
	}, {
		event: "block",
		length: 3,
		height: -150,
		gap: 0
	}, {
		event: "block",
		length: 5,
		height: -90,
		gap: 200,
		stack: true,
		objects: "B"
	}, {
		event: "block",
		length: 3,
		height: 50,
		gap: 200
	}, {
		event: "block",
		length: 3,
		height: 100,
		gap: 200,
		stack: true,
		objects: "R"
	}, {
		event: "block",
		length: 3,
		height: -100,
		gap: 0,
		objects: "PP"
	}, {
		event: "block",
		length: 3,
		height: 0,
		gap: 100,
		stack: true,
		objects: "PPPP"
	}, {
		event: "block",
		length: 3,
		height: -200,
		gap: 100,
		objects: "GG"
	}, {
		event: "block",
		length: 3,
		height: 60,
		gap: 200,
		stack: true,
		objects: "GG"
	}, {
		event: "block",
		length: 5,
		height: -150,
		gap: 0
	}, {
		event: "block",
		length: 8,
		height: -80,
		gap: 300,
		objects: "    GGGG"
	}
];
var hard1 = [{
		event: "speed",
		value: 1000
	}, {
		event: "block",
		length: 10,
		height: 0,
		gap: 100,
		objects: "PGGGG"
	}, {
		event: "turbulence",
		value: true
	}, {
		event: "block",
		length: 5,
		height: 0,
		gap: 100
	}, {
		event: "block",
		length: 3,
		height: -50,
		gap: 100
	}, {
		event: "block",
		length: 3,
		height: -50,
		gap: 100
	}, {
		event: "block",
		length: 10,
		height: -50,
		gap: 100,
		objects: "O"
	}, {
		event: "block",
		length: 8,
		height: -50,
		gap: 200,
		objects: " O"
	}, {
		event: "block",
		length: 3,
		height: 0,
		gap: 50,
		objects: "PBP"
	}, {
		event: "turbulence",
		value: false
	}
];
var hard2 = [{
		event: "speed",
		value: 1000
	}, {
		event: "block",
		length: 10,
		height: 0,
		gap: 100,
		objects: "GGG O"
	}, {
		event: "block",
		length: 8,
		height: 0,
		gap: 100,
		objects: "BPGGG  "
	}, {
		event: "block",
		length: 3,
		height: 0,
		gap: 100
	}, {
		event: "block",
		length: 3,
		height: 0,
		gap: 100
	}, {
		event: "block",
		length: 12,
		height: 50,
		gap: 100,
		objects: "RR RR"
	}, {
		event: "block",
		length: 3,
		height: 0,
		gap: 200
	}, {
		event: "block",
		length: 3,
		height: 40,
		gap: 100,
		objects: "O"
	}, {
		event: "block",
		length: 34,
		height: -100,
		gap: 0,
		objects: "GMGMGMGMG"
	}
];
var up_down_hard = [{
		event: "speed",
		value: 1000
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 500,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 700,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 700,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 150,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 500,
		objects: ""
	}
];
var up_down_hard_turbulence = [{
		event: "turbulence",
		value: true
	}, {
		event: "speed",
		value: 1200
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 250,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 500,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 250,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 700,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 250,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: 50,
		gap: 700,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 200,
		objects: "G"
	}, {
		event: "block",
		length: 1,
		height: -50,
		gap: 500,
		objects: "B"
	}, {
		event: "turbulence",
		value: false
	}
];
var ending = [{
		event: "speed",
		value: 1200
	}, {
		event: "block",
		length: 8,
		height: -150,
		gap: 200,
		objects: " W "
	}, {
		event: "block",
		length: 6,
		height: -80,
		gap: 200,
		objects: ""
	}, {
		event: "block",
		length: 30,
		height: 0,
		gap: 1600,
		trackEnd: true
	}
];
var segments = [tutorial, diamond_easy, med1, tall_intro, med2, turbulence_intro, up_down, bounce, diamond_med_1000, chubbies, hard1, hard2, up_down_hard, up_down_hard_turbulence, ending];

function Blocks(a) {
	TGE.GameWorldEntity.call(this, a);
	this.mWidth = 0;
	this.mBlocks = [];
	this.targetSlabGlow = 0.15;
	this.allowStacking = false;
	this.checkpoint = false;
	this.trackEnd = false;
	return this
}
Blocks.prototype = {
	Setup: function(j, h, f, l, k) {
		TGE.GameWorldEntity.prototype.Setup.call(this, j, h, null, k);
		var c = this.mGame.GetImage(f + "_left");
		var e = c.width;
		this.mWidth = e * (2 + l);
		this.mHeight = e;
		this.slabGlow = new TGE.DisplayObjectContainer();
		this.slabGlow.backgroundColor = "#080";
		var a = 16;
		this.slabGlow.x = this.slabGlow.y = a;
		this.slabGlow.width = this.mWidth - a * 2;
		this.slabGlow.height = e / 2 - a * 2;
		this.slabGlow.registrationX = this.slabGlow.registrationY = 0;
		this.slabGlow.alpha = this.targetSlabGlow;
		this.addChild(this.slabGlow);
		j += e / 2;
		h -= c.height / 2;
		var d = this.mGame.CreateWorldEntity(TGE.GameWorldEntity).Setup(j, h, f + "_left", k);
		d.CullToCamera(false, false, false, true);
		d.positionHacked = false;
		this.mBlocks.push(d);
		j += e;
		for (var g = 0; g < l; g++) {
			d = this.mGame.CreateWorldEntity(TGE.GameWorldEntity).Setup(j, h, f + "_center", k);
			d.CullToCamera(false, false, false, true);
			d.positionHacked = false;
			this.mBlocks.push(d);
			j += e
		}
		d = this.mGame.CreateWorldEntity(TGE.GameWorldEntity).Setup(j, h, f + "_right", k);
		d.CullToCamera(false, false, false, true);
		d.positionHacked = false;
		this.mBlocks.push(d);
		return this
	},
	playerLandedOn: function() {
		this.slabGlow.alpha = 0.5;
		this.targetSlabGlow = 0.25;
		if (this.checkpoint) {
			this.mGame.saveCheckpoint()
		}
		if (this.trackEnd) {
			this.mGame.trackComplete()
		}
	},
	subclassUpdate: function(a) {
		var c = 0.5;
		if (this.slabGlow.alpha > this.targetSlabGlow) {
			this.slabGlow.alpha -= c * a;
			if (this.slabGlow.alpha < this.targetSlabGlow) {
				this.slabGlow.alpha = this.targetSlabGlow
			}
		} else {
			if (this.slabGlow.alpha < this.targetSlabGlow) {
				this.slabGlow.alpha += c * a;
				if (this.slabGlow.alpha > this.targetSlabGlow) {
					this.slabGlow.alpha = this.targetSlabGlow
				}
			}
		}
	},
	checkAgainstPlayer: function(d) {
		var a = d.CurrentSlab();
		if (a != null && a != this) {
			return false
		}
		var f = this.worldPosition.x;
		var e = this.worldPosition.y;
		var j = d.worldPosition.x;
		var h = d.worldPosition.y;
		var g = d.LastPosition().y;
		var c = h;
		h -= d.Height() / 2;
		if (a == this) {
			if (j > f + this.mWidth) {
				d.SetCurrentSlab(null)
			}
			return
		}
		if (c == g) {
			return
		}
		if (d.mVerticalSpeed <= 0 && g > e && h <= e && j >= f && j <= f + this.mWidth) {
			d.SetCurrentSlab(this)
		}
	},
	_updateScreenPosition: function() {
		Blocks.superclass._updateScreenPosition.call(this);
		if (this.x < 0) {
			for (var a = 0; a < this.mBlocks.length; a++) {
				var c = this.mBlocks[a];
				if (!c.MarkedForRemoval()) {
					if (!c.positionHacked && (c.x - c.width / 2) < 0) {
						c.worldPosition.x -= 1;
						c.positionHacked = true
					}
				}
			}
		}
	},
	subclassShouldBeRemoved: function() {
		return this.x + this.mWidth < 0
	},
	subclassCleanup: function() {
		for (var a = 0; a < this.mBlocks.length; a++) {
			this.mBlocks[a].markForRemoval()
		}
	}
};
extend(Blocks, TGE.GameWorldEntity, null);
Player.prototype = new TGE.GameWorldEntity();
Player.prototype.constructor = Player;

function Player(a) {
	TGE.GameWorldEntity.call(this, a);
	this.mStopped = false;
	this.mDesiredSpeed = 0;
	this.mHorizontalSpeed = 0;
	this.mVerticalSpeed = 0;
	this.invincible = false;
	this.shieldEffectDuration = 1;
	this.shieldTimer = 0;
	this.mCurrentSlab = null;
	this.mJumpPower = 400;
	this.mLastPosition = new TGE.Point();
	this.glowSprite = null;
	this.desiredRotation = 0;
	this.rotationSpeed = 10;
	this.damageTimer = 0
}
Player.prototype.Setup = function(c) {
	var a = 0;
	var d = 600;
	TGE.GameWorldEntity.prototype.Setup.call(this, a, d, "racer", c);
	this.mHorizontalSpeed = this.mGame.Width() * this.mDesiredSpeed;
	this.glowSprite = new TGE.Sprite();
	this.glowSprite.scaleX = this.glowSprite.scaleY = 5;
	this.addChild(this.glowSprite);
	this.glowSprite.visible = false;
	this.rawBounds = new TGE.Rectangle(0, 0, this.width, this.height);
	this.shield1 = new TGE.Sprite();
	this.shield1.setImage("shield");
	this.shield1.x = -2;
	this.shield1.y = 1;
	this.addChild(this.shield1);
	this.shield1.visible = false;
	this.shield2 = new TGE.Sprite();
	this.shield2.setImage("shield");
	this.shield2.x = -2;
	this.shield2.y = 1;
	this.rotation = 45;
	this.addChild(this.shield2);
	this.shield2.visible = false;
	this.desiredRotation = -15;
	this.rotationSpeed = 25;
	return this
};
Player.prototype.reset = function() {
	this.setImage("racer");
	this.mStopped = false;
	this.mDesiredSpeed = 0;
	this.mHorizontalSpeed = 0;
	this.mVerticalSpeed = 0;
	this.invincible = false;
	this.shieldTimer = 0;
	this.mCurrentSlab = null;
	this.damageTimer = 0;
	this.worldPosition.y = 600;
	this.desiredRotation = -15;
	this.rotationSpeed = 25
};
Player.prototype.LastPosition = function() {
	return this.mLastPosition
};
Player.prototype.CurrentSlab = function() {
	return this.mCurrentSlab
};
Player.prototype.SetCurrentSlab = function(a) {
	this.mCurrentSlab = a;
	if (a !== null) {
		a.playerLandedOn();
		this.doubleJumped = false;
		this.desiredRotation = this.rotation = 0;
		this.rotationSpeed = 200
	} else {
		this.desiredRotation = -25;
		this.rotationSpeed = 25
	}
};
Player.prototype.Jump = function() {
	if (this.mCurrentSlab == null) {
		if (!this.doubleJumped) {
			this.doubleJump()
		}
		return
	}
	this.mCurrentSlab = null;
	this.mVerticalSpeed = this.mJumpPower;
	this.rotation = 15;
	this.desiredRotation = -10;
	this.rotationSpeed = 20
};
Player.prototype.doubleJump = function() {
	this.mVerticalSpeed = this.mJumpPower;
	this.doubleJumped = true;
	this.desiredRotation = 370;
	this.rotationSpeed = 600;
	this.mGame.achievements.earnedAchievement("aerialist")
};
Player.prototype.Stopped = function() {
	return this.mStopped
};
Player.prototype.makeInvincible = function() {
	this.invincible = true;
	this.shieldTimer = this.shieldEffectDuration;
	this.setImage("racer_shield")
};
Player.prototype.boost = function() {
	this.shieldTimer = this.shieldEffectDuration;
	this.setSpeed(1400)
};
Player.prototype.setSpeed = function(a) {
	this.mDesiredSpeed = a
};
Player.prototype.changeSpeed = function(a) {
	this.mDesiredSpeed += a;
	this.mGame.playSound("accelerate")
};
Player.prototype.getCoreSpeed = function() {
	return this.mDesiredSpeed
};
Player.prototype.stop = function() {
	this.mDesiredSpeed = 0;
	this.mStopped = true
};
Player.prototype.getRawBounds = function() {
	return this.rawBounds
};
Player.prototype.gotPowerup = function(a) {
	this.glowSprite.setImage("glow_" + a);
	this.glowSprite.visible = true;
	this.glowTimer = 1
};
Player.prototype.gotHit = function() {
	if (this.damageTimer > 0) {
		return
	}
	if (this.invincible) {
		this.invincible = false;
		this.setImage("racer");
		return
	}
	this.mGame.loseLife();
	if (this.mGame.lives <= 0) {
		this.stop()
	} else {
		this.damageTimer = 2
	}
};
Player.prototype.subclassUpdate = function(r) {
	if (!this.mGame.mPlaying || this.mGame.gameplayFrozen) {
		return
	}
	if (this.damageTimer > 0) {
		this.damageTimer -= r;
		this.visible = Math.floor(this.mAge * 10) % 2 === 0
	} else {
		this.visible = true
	} if (this.shieldTimer > 0) {
		var c = (this.shieldTimer / this.shieldEffectDuration);
		this.shield1.visible = true;
		this.shield2.visible = true;
		this.shield1.alpha = this.shield2.alpha = c * 0.6;
		this.shield1.scaleX = this.shield2.scaleX = this.shield1.scaleY = this.shield2.scaleY = 1 + (1 - c);
		this.shield1.rotation += 200 * r;
		this.shield2.rotation -= 200 * r;
		this.shieldTimer -= r
	} else {
		this.shield1.visible = false;
		this.shield2.visible = false
	} if (this.glowTimer > 0) {
		this.glowTimer -= r;
		if (this.glowTimer <= 0) {
			this.glowSprite.alpha = 0;
			this.glowSprite.visible = false
		} else {
			this.glowSprite.alpha = this.glowTimer / 1
		}
	}
	if (this.rotation < this.desiredRotation) {
		this.rotation += this.rotationSpeed * r;
		if (this.rotation > this.desiredRotation) {
			this.rotation = this.desiredRotation
		}
	} else {
		if (this.rotation > this.desiredRotation) {
			this.rotation -= this.rotationSpeed * r;
			if (this.rotation < this.desiredRotation) {
				this.rotation = this.desiredRotation
			}
		}
	} if (this.mHorizontalSpeed !== this.mDesiredSpeed) {
		this.mHorizontalSpeed += (this.mDesiredSpeed - this.mHorizontalSpeed) * r
	}
	if (this.mStopped && this.mHorizontalSpeed > 0) {
		this.mHorizontalSpeed -= 250 * r;
		if (this.mHorizontalSpeed < 0) {
			this.mHorizontalSpeed = 0
		}
	}
	var j = this.rawBounds.height / 2;
	var l = this.worldPosition.x;
	var k = this.worldPosition.y;
	var a = l;
	var q = k;
	this.mLastPosition.x = l;
	this.mLastPosition.y = q;
	if (true) {
		a += this.mHorizontalSpeed * r;
		if (this.mCurrentSlab !== null) {
			this.mVerticalSpeed = 0
		} else {
			var f = false;
			if (this.ApplyThrust()) {
				f = true;
				var o = 536 * 0.7;
				this.mVerticalSpeed += 536 * 5.4 * r;
				if (this.mVerticalSpeed > o) {
					this.mVerticalSpeed = o
				}
			} else {
				var m = 2;
				var h = -536 * 0.8;
				this.mVerticalSpeed -= 536 * m * r;
				if (this.mVerticalSpeed < h) {
					this.mVerticalSpeed = h
				}
			}
		}
	} else {
		this.mVerticalSpeed = 0
	}
	q += this.mVerticalSpeed * r;
	var n = this.mGame.blocks.length;
	for (b = 0; b < n; b++) {
		var g = this.mGame.blocks[b];
		var e = g.worldPosition.x;
		var d = g.worldPosition.y - 7;
		if (this.mCurrentSlab === g) {
			if (a > e + g.mWidth) {
				this.SetCurrentSlab(null)
			}
		} else {
			if (this.mVerticalSpeed <= 0 && k > d && q <= d && a >= e && a <= e + g.mWidth) {
				this.SetCurrentSlab(g);
				q = d;
				break
			}
		}
	}
	this.mTrotting = false;
	var j = this.rawBounds.height / 2;
	if (!this.mStopped && q < j) {
		this.stop();
		this.mGame.loseLife()
	}
	this.mGame.incPlayerDistance(a - l);
	this.worldPosition.x = a;
	this.worldPosition.y = q;
	this.rawBounds.x = this.x - this.rawBounds.width / 2;
	this.rawBounds.y = this.y - this.rawBounds.height / 2
};
Player.prototype.ApplyThrust = function() {
	return false
};
Powerup.prototype = new TGE.GameWorldEntity();
Powerup.prototype.constructor = Powerup;

function Powerup(a) {
	TGE.GameWorldEntity.call(this, a);
	this.color = "green";
	this.pickedUp = false;
	this.rotationSpeed = 30;
	this.alphaFade = 0;
	this.scaleSpeed = 0;
	this.tutorial = null;
	return this
}
Powerup.prototype.Setup = function(c, a, d, e) {
	this.color = "green";
	switch (d) {
		case "G":
			this.color = "green";
			break;
		case "P":
			this.color = "purple";
			break;
		case "W":
			this.color = "white";
			break;
		case "B":
			this.color = "blue";
			break;
		case "J":
			this.tutorial = "tutorial_jump";
			break;
		case "D":
			this.tutorial = "tutorial_doublejump";
			break;
		case "T":
			this.tutorial = "tutorial_jumpthrough";
			break
	}
	if (this.tutorial !== null) {
		TGE.GameWorldEntity.prototype.Setup.call(this, c, a, null, e)
	} else {
		TGE.GameWorldEntity.prototype.Setup.call(this, c, a, "powerup_" + this.color, e);
		this.scaleX = this.scaleY = 0.75;
		var f = new TGE.Sprite();
		f.setImage("glow_" + this.color);
		f.scaleX = f.scaleY = 2;
		this.addChild(f)
	}
	this.CullToCamera(false, false, false, true);
	return this
};
Powerup.prototype.subclassUpdate = function(m) {
	this.rotation += this.rotationSpeed * m;
	var j = this.scaleSpeed * m;
	this.scaleX += j;
	this.scaleY += j;
	this.alpha -= this.alphaFade * m;
	this.alpha = Math.max(0, this.alpha);
	var f = this.worldPosition.x;
	var d = this.worldPosition.y;
	var h = this.mGame.getPlayer().worldPosition.x;
	var e = this.mGame.getPlayer().worldPosition.y;
	var a = 30;
	var c = a;
	if (this.tutorial !== null) {
		c = 150
	}
	if (!this.pickedUp && f > h - a && f < h + a && d > e - c && d < e + a) {
		this.pickedUp = true;
		if (this.tutorial !== null) {
			this.mGame.showTutorial(this.tutorial);
			return
		}
		this.rotationSpeed = 800;
		this.alphaFade = 2;
		this.scaleSpeed = 2;
		var g = 0;
		var l = null;
		var k = null;
		switch (this.color) {
			case "green":
				g = 50;
				l = "plus_50";
				k = "powerup";
				break;
			case "purple":
				g = 100;
				l = "plus_100";
				k = "powerup2";
				break;
			case "white":
				l = "boost_popup";
				this.mGame.getPlayer().boost();
				this.mGame.achievements.earnedAchievement("nitro");
				break;
			case "blue":
				if (this.mGame.lives >= 5) {
					g = 500;
					l = "plus_500"
				} else {
					g = 0;
					l = "one_up";
					this.mGame.oneUp()
				}
				break
		}
		this.mGame.awardPoints(g);
		this.mGame.getPlayer().gotPowerup(this.color);
		if (l !== null) {
			this.mGame.CreateWorldEntity(LabelPopup).Setup(this.x, this.y, l, 1, "UI")
		}
		if (k !== null) {
			this.mGame.playSound(k)
		}
	}
};
Obstacle.prototype = new TGE.GameWorldEntity();
Obstacle.prototype.constructor = Obstacle;

function Obstacle(a) {
	TGE.GameWorldEntity.call(this, a);
	this.type = "pyramid";
	this.glow = null;
	this.beenHit = false;
	return this
}
Obstacle.prototype.Setup = function(c, a, d, e) {
	switch (d) {
		case "R":
			this.type = "pyramid";
			break;
		case "O":
			this.type = "pyramid_large";
			break;
		case "M":
			this.type = "pyramid_fat";
			break;
		case "E":
			this.type = "emp";
			break
	}
	TGE.GameWorldEntity.prototype.Setup.call(this, c, a, this.type, e);
	this.registrationY = 1;
	this.CullToCamera(false, false, false, true);
	return this
};
Obstacle.prototype.subclassUpdate = function(a) {
	var d = this.getBounds();
	var c = this.mGame.getPlayer().getBounds();
	if (!this.beenHit && this.getBounds().intersects(this.mGame.getPlayer().getRawBounds(), 0.8, 0.8)) {
		this.beenHit = true;
		if (!this.mGame.getPlayer().mStopped) {
			switch (this.type) {
				case "pyramid":
				case "pyramid_large":
				case "pyramid_fat":
					this.mGame.getPlayer().gotHit();
					break;
				case "emp":
					break
			}
			this.mGame.playSound("impact")
		}
	}
};
LabelPopup = function(a) {
	LabelPopup.superclass.constructor.call(this, a);
	this.xDelta = 0;
	this.yDelta = 0;
	this.fade = false;
	this.blink = false;
	this.lifespan = 1;
	this.host = null;
	this.hostOffsetX = 0;
	this.hostOffsetY = 0;
	return this
};
LabelPopup.prototype = {
	Setup: function(a, f, c, e, d) {
		LabelPopup.superclass.Setup.call(this, a, f, c, d);
		if (e === 0) {
			this.fade = true;
			this.lifespan = 1
		} else {
			if (e === 1) {
				this.yDelta = -80;
				this.xDelta = -40;
				this.fade = true;
				this.lifespan = 1
			} else {
				if (e === 2) {
					this.blink = true;
					this.lifespan = 4
				}
			}
		}
		return this
	},
	linkTo: function(c, a, d) {
		this.host = c;
		this.hostOffsetX = a;
		this.hostOffsetY = d;
		this.fade = false;
		this.lifespan = -1
	},
	subclassUpdate: function(a) {
		this.y += this.yDelta * a;
		this.x += this.xDelta * a;
		if (this.fade) {
			if (this.mAge > 0.5) {
				this.alpha -= a * 2;
				if (this.alpha <= 0) {
					this.markForRemoval()
				}
			}
		}
		if (this.blink) {
			this.visible = Math.floor(this.mAge * 8) % 2 === 0
		}
		if (
		/*!this.lifespan<0 &&*/this.mAge > this.lifespan) {
			this.markForRemoval()
		}
		if (this.host !== null) {
			if (this.host.mMarkedForRemoval) {
				this.markForRemoval()
			} else {
				this.x = this.host.x + this.hostOffsetX;
				this.y = this.host.y + this.hostOffsetY
			}
		}
	}
};
extend(LabelPopup, TGE.ScreenEntity);
VectorRunner = function() {
	VectorRunner.superclass.constructor.call(this);
	this.mScreenManager.setupFadeIn("#000", 0.3);
	this.analytics = new TGE.GoogleAnalytics("Vector Runner Remix", "UA-29301358-10");
	if (window.gServerSessionDuration != undefined) {
		this.adSessionDuration = gServerSessionDuration
	} else {
		this.adSessionDuration = 120
	}
	this.gameAdSessionDuration = 0;
	this.adGameOverURL = "";
	// this.adGameOverURL += ";key=" + getDistributionPartner();
	// this.adGameOverURL += ";kvenv=" + encodeURIComponent(TGE.BrowserDetect.platform);
	this.adGameReplayURL = "";
	// this.adGameReplayURL += ";key=" + getDistributionPartner();
	// this.adGameReplayURL += ";kvenv=" + encodeURIComponent(TGE.BrowserDetect.platform);
	if (this.onPhoneGap() && this.oniOS()) {
		this.gamecenter = window.plugins.gamecenter;
		this.gameCenterLeaderboardID = "com.tresensa.vectorrunnerremix";
		var m = "560911787258340";
		try {
			FB.init({
				appId: m,
				nativeInterface: CDV.FB,
				useCachedDialogs: false
			})
		} catch (f) {
			console.log("FB Init error:" + f)
		}
	}
	var g = [];
	var k = TGE.BrowserDetect.isMobileDevice ? "tap" : "click";
	var a = [{
			id: "racer",
			url: "images/racer.png"
		}, {
			id: "racer_shield",
			url: "images/racer_shield.png"
		}, {
			id: "shield",
			url: "images/shield.png"
		}, {
			id: "glow_green",
			url: "images/glow_green.png"
		}, {
			id: "glow_white",
			url: "images/glow_white.png"
		}, {
			id: "glow_blue",
			url: "images/glow_blue.png"
		}, {
			id: "glow_purple",
			url: "images/glow_purple.png"
		}, {
			id: "powerup_green",
			url: "images/powerup_green.png"
		}, {
			id: "powerup_white",
			url: "images/powerup_white.png"
		}, {
			id: "powerup_blue",
			url: "images/powerup_blue.png"
		}, {
			id: "powerup_purple",
			url: "images/powerup_purple.png"
		}, {
			id: "pyramid",
			url: "images/pyramid.png"
		}, {
			id: "pyramid_large",
			url: "images/pyramid_large.png"
		}, {
			id: "pyramid_fat",
			url: "images/pyramid_fat.png"
		}, {
			id: "plus_100",
			url: "images/plus_100.png"
		}, {
			id: "plus_500",
			url: "images/plus_500.png"
		}, {
			id: "plus_50",
			url: "images/plus_50.png"
		}, {
			id: "one_up",
			url: "images/one_up.png"
		}, {
			id: "boost_popup",
			url: "images/boost_popup.png"
		}, {
			id: "digits",
			url: "images/digits.png"
		}, {
			id: "big_digits",
			url: "images/big_digits.png"
		}, {
			id: "big_digits_comma",
			url: "images/big_digits_comma.png"
		}, {
			id: "pause_button",
			url: "images/pause_button.png"
		}, {
			id: "shield_icon",
			url: "images/shield_icon.png"
		}, {
			id: "checkpoint",
			url: "images/checkpoint.png"
		}, {
			id: "turbulence_warning",
			url: "images/turbulence_warning.png"
		}, {
			id: "parallax_space",
			url: "images/parallax_space.png"
		}, {
			id: "parallax_dust",
			url: "images/parallax_dust.png"
		}, {
			id: "block_left",
			url: "images/block_left.png"
		}, {
			id: "block_right",
			url: "images/block_right.png"
		}, {
			id: "block_center",
			url: "images/block_center.png"
		}, {
			id: "achievement_popup",
			url: "images/achievement_popup.png"
		}, {
			id: "track_complete",
			url: "images/track_complete.png"
		}, {
			id: "start_beat_your_score",
			url: "images/start_beat_your_score.png"
		}, {
			id: "sound_button_on",
			url: "images/audio-on.png"
		}, {
			id: "sound_button_off",
			url: "images/audio-off.png"
		}, {
			id: "tresensa_plug",
			url: "images/screens/loading/tresensa_plug.png"
		}, {
			id: "dyog_plug",
			url: "images/screens/loading/dyog_plug.png"
		}, {
			id: "logo",
			url: "images/screens/mainmenu/logo.png"
		}, {
			id: "mainmenu_play_button",
			url: "images/screens/mainmenu/play_button.png"
		}, {
			id: "achievements_menu_button",
			url: "images/screens/achievements/menu_button.png"
		}, {
			id: "achievements_back_button",
			url: "images/screens/achievements/back_button.png"
		}, {
			id: "achievement_locked",
			url: "images/screens/achievements/achievement_locked.png"
		}, {
			id: "achievement_aerialist",
			url: "images/screens/achievements/aerialist.png"
		}, {
			id: "achievement_bumpy",
			url: "images/screens/achievements/bumpy.png"
		}, {
			id: "achievement_victory",
			url: "images/screens/achievements/victory.png"
		}, {
			id: "achievement_nitro",
			url: "images/screens/achievements/nitro.png"
		}, {
			id: "achievement_bremix",
			url: "images/screens/achievements/bremix.png"
		}, {
			id: "pausescreen_resume_button",
			url: "images/screens/pausescreen/resume_button.png"
		}, {
			id: "pausescreen_restart_button",
			url: "images/screens/pausescreen/restart_button.png"
		}, {
			id: "pausescreen_mainmenu_button",
			url: "images/screens/pausescreen/mainmenu_button.png"
		}, {
			id: "gameover_tryagain_button",
			url: "images/screens/gameover/tryagain_button.png"
		}, {
			id: "gameover_twitter_button",
			url: "images/screens/loading/dyog_plug.png"
		}, {
			id: "gameover_facebook_button",
			url: "images/screens/loading/dyog_plug.png"
		}, {
			id: "gameover_gamecenter_button",
			url: "images/screens/loading/dyog_plug.png"
		}, {
			id: "gameover_apple_appstore_button",
			url: "images/screens/loading/dyog_plug.png"
		}, {
			id: "gameover_google_play_button",
			url: "images/screens/loading/dyog_plug.png"
		}, {
			id: "gameover_kik_button",
			url: "images/screens/loading/dyog_plug.png"
		}, {
			id: "tutorial_continue",
			url: "images/screens/tutorials/continue.png"
		}, {
			id: "tutorial_notips",
			url: "images/screens/tutorials/notips.png"
		}, {
			id: "tutorial_jump",
			url: "images/screens/tutorials/tutorial_jump.jpg"
		}, {
			id: "tutorial_jump_caption",
			url: "images/screens/tutorials/" + k + ".png"
		}, {
			id: "tutorial_doublejump",
			url: "images/screens/tutorials/tutorial_doublejump.jpg"
		}, {
			id: "tutorial_doublejump_caption",
			url: "images/screens/tutorials/" + k + "2.png"
		}, {
			id: "tutorial_jumpthrough",
			url: "images/screens/tutorials/tutorial_jumpthrough.jpg"
		}, {
			id: "music",
			url: "audio/music.ogg",
			backup_url: "audio/music.mp3",
			assetType: "audio"
		}
	];
	var n = [];
	if (!this.oniOS()) {
		a = a.concat(n)
	}
	this.assetManager.assignImageAssetList("loading", g);
	this.assetManager.assignImageAssetList("required", a);
	this.assetManager.rootLocation = "./assets-1.1.4";
	this.mSoundToggleOn = null;
	this.mSoundToggleOff = null;
	this.showTips = true;
	this.tutorialsViewed = [];
	var j = false;
	var c, l, h, d = document.cookie.split(";");
	for (c = 0; c < d.length; c++) {
		l = d[c].substr(0, d[c].indexOf("="));
		h = d[c].substr(d[c].indexOf("=") + 1);
		l = l.replace(/^\s+|\s+$/g, "");
		if (l == "muted") {
			j = parseInt(unescape(h)) === 1
		} else {
			if (l == "tips") {
				this.showTips = parseInt(unescape(h)) === 1
			}
		}
	}
	if (j) {
		this.toggleMute()
	}
	this.blueRemixScore = 6000;
	this.mAchievementPopup = null;
	this.mAchievementMessage = null;
	this.mAchievementPopupIcon = null;
	this.mAchievementPopupTimer = 0;
	this.mStartMessage = null;
	this.mStartMessageDigits = null;
	this.mStartMessageTimer = 0;
	this.mLevelEvents = null;
	this.mCards = segments;
	this.mCurrentCardIndex = -1;
	this.mCurrentLevelEventIndex = 0;
	this.insertedCheckpoint = true;
	this.checkPointEvent = {
		event: "block",
		length: 6,
		height: 0,
		gap: 100,
		objects: "",
		checkpoint: true
	};
	this.gameplayFrozen = false;
	this.trackEndTimer = -1;
	this.bestScore = 0;
	this.score = this.noCollisionScore = 0;
	this.lives = 5;
	this.lifeIcons = [];
	this.redOverlay = null;
	this.turbulenceStrength = 0;
	this.turbulenceDelta = 0;
	this.justResetCard = true;
	this.checkpointState;
	this.blocks = [];
	this.achievements = new TGE.Achievements();
	this.achievements.lockedIconID = "achievement_locked";
	this.achievements.earnedAchievementCallback = this.achievementPopup.bind(this);
	this.achievements.createAchievement("aerialist", "Aerialist", "Perform a double jump.", "achievement_aerialist");
	this.achievements.createAchievement("bumpy", "Bumpy Ride", "Make it through the first patch of turbulence.", "achievement_bumpy");
	this.achievements.createAchievement("nitro", "Nitro", "Pickup a white boost cube.", "achievement_nitro");
	this.achievements.createAchievement("bremix", "Blue Remix", "Score " + this.blueRemixScore + " points without losing a life.", "achievement_bremix");
	this.achievements.createAchievement("victory", "Victory Lane", "Finish the entire track.", "achievement_victory");
	this.achievements.loadCompletedAchievements()
};
VectorRunner.prototype = {
	subclassSetupLayers: function() {
		this.CreateLayer("background");
		this.CreateLayer("road");
		this.CreateLayer("dust");
		this.CreateLayer("objects");
		this.CreateLayer("player");
		this.CreateLayer("flashes");
		this.CreateLayer("popups");
		this.CreateLayer("UI")
	},
	subclassStartPlaying: function() {
		document.getElementById("game_canvas").onselectstart = function() {
			return false
		};
		this.score = this.noCollisionScore = 0;
		this.lives = 5;
		this.turbulenceStrength = 0;
		this.turbulenceDelta = 0;
		this.mLastSlab = null;
		this.gameplayFrozen = false;
		this.trackEndTimer = -1;
		this.redOverlay = new TGE.DisplayObjectContainer();
		this.redOverlay.registrationX = this.redOverlay.registrationY = 0;
		this.redOverlay.width = this.Width();
		this.redOverlay.height = this.Height();
		this.redOverlay.backgroundColor = "#f20";
		this.getLayer("flashes").addChild(this.redOverlay);
		this.redOverlay.visible = false;
		this.mCameraLocation = new TGE.Point(this.Width() / 2, 0);
		this.mCurrentLevelEventIndex = 0;
		this.insertedCheckpoint = true;
		this.mCurrentCardIndex = -1;
		this.mLevelEvents = null;
		this.justResetCard = true;
		this.checkpointState = {};
		this.blocks = [];
		this.saveCheckpoint(0);
		this.playMusic()
	},
	subclassSetupLevel: function(g) {
		this.ClearScene();
		this.mDistanceDigitIcons = [];
		this.SetBackgroundColor("#000");
		var f = (this._mNativeScaling == null ? 1 : this._mNativeScaling.y);
		var a;
		var h = (25 / f) + this.mCanvasDiv.clientHeight - (this.mCanvasDiv.clientHeight - 536) / 3;
		a = this.CreateWorldEntity(TGE.ParallaxPane).Setup(h, 0.8, "parallax_space", "background");
		a.scaleX = 3;
		a.scaleY = 3 * f;
		this.dust = this.CreateWorldEntity(TGE.ParallaxPane).Setup(h, 3, "parallax_dust", "dust");
		this.dust.visible = false;
		this.dust.scaleX = 3;
		this.dust.scaleY = 3 * f;
		this.mPlayer = this.CreateWorldEntity(Player).Setup("player");
		iconX = 20;
		iconY = 28;
		for (i = 0; i < 6; i++) {
			var j = this.CreateUIEntity(TGE.ScreenEntity).Setup(iconX, iconY, null, "UI");
			j.SetImage("digits", 1, 10);
			this.mDistanceDigitIcons[i] = j;
			iconX += 24
		}
		this.lifeIcons = [];
		iconX = 23;
		iconY = 66;
		for (i = 0; i < 5; i++) {
			var e = new TGE.Sprite();
			e.setImage("shield_icon");
			e.x = iconX;
			e.y = iconY;
			this.getLayer("UI").addChild(e);
			this.lifeIcons.push(e);
			iconX += e.width
		}
		var d = 830;
		var c = 45;
		this.mSoundToggleOn = this.CreateUIEntity(TGE.Button).Setup(d, c, "sound_button_on", this.toggleMute.bind(this), 1, "UI");
		this.mSoundToggleOff = this.CreateUIEntity(TGE.ScreenEntity).Setup(d, c, "sound_button_off", "UI");
		this.updateSoundButtons();
		this.DisplayStartMessage(this.bestScore)
	},
	subclassUpdateGame: function(p) {
		if (this.gameplayFrozen) {
			return
		}
		var o = this.blocks.length;
		for (var l = 0; l < o; l++) {
			var h = this.blocks[l];
			if (h.mMarkedForRemoval) {
				this.blocks.slice(l, 1)
			}
		}
		if (this.trackEndTimer >= 0) {
			this.trackEndTimer -= p;
			if (this.trackEndTimer <= 0) {
				this.EndGame()
			}
		}
		this.processEvents(p);
		var g = 3;
		if (this.mGameTime > g) {
			var e = Math.max(0.15, 1 - (this.mGameTime - g));
			this.mSoundToggleOn.alpha = e;
			this.mSoundToggleOff.alpha = e;
			this.mPauseButton.alpha = e
		} else {
			this.mSoundToggleOn.alpha = 1;
			this.mSoundToggleOff.alpha = 1;
			this.mPauseButton.alpha = 1
		} if (this.mPlayer != null) {
			var f = (this._mNativeScaling == null ? 1 : this._mNativeScaling.y);
			var n = this.mPlayer.worldPosition.x + 400;
			var m = this.Height() * 0.5;
			this.mCameraLocation.x = n;
			this.mCameraLocation.y = m * (1 / f);
			this.turbulenceStrength += this.turbulenceDelta * p;
			this.turbulenceStrength = Math.min(1, this.turbulenceStrength);
			this.turbulenceStrength = Math.max(0, this.turbulenceStrength);
			if (this.turbulenceStrength > 0) {
				this.mCameraLocation.y += Math.sin(this.mGameTime * 15) * 25 * this.turbulenceStrength;
				this.dust.visible = true;
				this.dust.alpha = this.turbulenceStrength
			} else {
				this.dust.visible = false
			}
		}
		if (this.redOverlay.visible) {
			this.redOverlay.alpha -= p * 0.7;
			if (this.redOverlay.alpha <= 0) {
				this.redOverlay.alpha = 0;
				this.redOverlay.visible = false;
				if (this.lives > 0) {
					if (this.mPlayer.Stopped()) {
						if (this.mCards[this.mCurrentCardIndex] == null) {
							this.EndGame()
						} else {
							this.mPlayer.reset();
							this.getLayer("road").clearChildren();
							this.getLayer("objects").clearChildren();
							this.getLayer("popups").clearChildren();
							this.mLastSlab = null;
							this.justResetCard = true;
							this.loadCheckpoint()
						}
					}
				} else {
					this.EndGame()
				}
			}
		}
		if (this.mStartMessageTimer > 0) {
			this.mStartMessageTimer -= p;
			if (this.mStartMessageTimer <= 0) {
				this.mStartMessage.markForRemoval();
				for (var k = 0; k < this.mStartMessageDigits.length; k++) {
					this.mStartMessageDigits[k].markForRemoval()
				}
			} else {
				var j = 1;
				var c = this.mStartMessageTimer > j ? 1 : this.mStartMessageTimer / j;
				this.mStartMessage.alpha = c;
				for (var k = 0; k < this.mStartMessageDigits.length; k++) {
					this.mStartMessageDigits[k].alpha = c
				}
			}
		}
		if (this.mAchievementPopupTimer > 0) {
			this.mAchievementPopupTimer -= p;
			if (this.mAchievementPopupTimer <= 0) {
				this.mAchievementPopup.markForRemoval();
				this.mAchievementMessage.markForRemoval();
				this.mAchievementPopup = null
			}
		}
		if (!this.mPlaying) {
			return
		}
		var a = this.getScore().toString();
		for (si = 0; si < 6; si++) {
			if (a.length > si) {
				this.mDistanceDigitIcons[si].Show();
				this.mDistanceDigitIcons[si].setSpriteIndex(a.charCodeAt(si) - 48)
			} else {
				this.mDistanceDigitIcons[si].Hide()
			}
		}
		for (i = 0; i < 5; i++) {
			this.lifeIcons[i].visible = (this.lives - 1) >= i
		}
		if (this.mStartMessageTimer > 0) {
			this.mStartMessageTimer -= p;
			if (this.mStartMessageTimer <= 0) {
				this.mStartMessage.markForRemoval();
				for (var k = 0; k < this.mStartMessageDigits.length; k++) {
					this.mStartMessageDigits[k].markForRemoval()
				}
			} else {
				var j = 1;
				var c = this.mStartMessageTimer > j ? 1 : this.mStartMessageTimer / j;
				this.mStartMessage.alpha = c;
				for (var k = 0; k < this.mStartMessageDigits.length; k++) {
					this.mStartMessageDigits[k].alpha = c
				}
			}
		}
		if (this.mAchievementPopupTimer > 0) {
			this.mAchievementPopupTimer -= p;
			if (this.mAchievementPopupTimer <= 0) {
				this.mAchievementPopup.markForRemoval();
				this.mAchievementMessage.markForRemoval();
				this.mAchievementPopup = null
			}
		}
	},
	PauseGame: function(a) {
		VectorRunner.superclass.PauseGame.call(this, a)
	},
	subclassMouseDown: function() {
		if (this.mPlaying && this.mPlayer != null && !this.gameplayFrozen && this.trackEndTimer < 0) {
			this.mPlayer.Jump()
		}
	},
	subclassEndGame: function() {
		if (this.getScore() > this.bestScore) {
			this.bestScore = this.getScore()
		}
	},
	showTutorial: function(c) {
		if (this.showTips && this.tutorialsViewed[c] == null) {
			this.freezeGameplay(true);
			var a = this.ShowScreen(TutorialScreen);
			a.setTutorial(c);
			this.tutorialsViewed[c] = true
		}
	},
	freezeGameplay: function(a) {
		this.gameplayFrozen = a
	},
	disableTips: function() {
		this.showTips = false;
		this.saveSettings()
	},
	loadCard: function(a) {
		this.mCurrentLevelEventIndex = 0;
		this.insertedCheckpoint = false;
		this.mLevelEvents = a
	},
	trackComplete: function() {
		this.mPlayer.stop();
		this.trackEndTimer = 4;
		this.CreateWorldEntity(LabelPopup).Setup(this.Width() * 0.5, this.Height() * 0.25, "track_complete", 2, "popups");
		this.achievements.earnedAchievement("victory")
	},
	saveCheckpoint: function(a) {
		a = typeof a === "undefined" ? this.mCurrentCardIndex : a;
		this.checkpointState.cardIndex = a;
		this.checkpointState.score = this.score;
		this.checkpointState.speed = this.mPlayer.getCoreSpeed();
		if (!this.justResetCard) {
			this.CreateWorldEntity(LabelPopup).Setup(this.Width() * 0.5, this.Height() * 0.8, "checkpoint", 0, "popups")
		}
	},
	loadCheckpoint: function() {
		this.score = this.checkpointState.score;
		this.mPlayer.setSpeed(this.checkpointState.speed);
		this.turbulenceStrength = 0;
		this.turbulenceDelta = 0;
		this.blocks = [];
		this.mCurrentCardIndex = this.checkpointState.cardIndex;
		this.loadCard(this.mCards[this.mCurrentCardIndex])
	},
	processLevelEvent: function(a) {
		switch (a.event) {
			case "speed":
				this.mPlayer.setSpeed(a.value);
				break;
			case "speed_change":
				this.mPlayer.changeSpeed(a.value);
				break;
			case "turbulence":
				this.turbulenceDelta = a.value ? 0.3 : -0.3;
				if (a.value && this.turbulenceStrength === 0) {
					this.CreateWorldEntity(LabelPopup).Setup(this.Width() * 0.5, this.Height() * 0.25, "turbulence_warning", 2, "popups")
				} else {
					this.achievements.earnedAchievement("bumpy")
				}
				break;
			case "block":
				var d;
				if (this.mLastSlab === null) {
					d = this.mPlayer.worldPosition.x
				} else {
					d = this.mLastSlab.worldPosition.x;
					d += this.mLastSlab.allowStacking ? 0 : this.mLastSlab.mWidth
				}
				var c = (a.gap && !this.justResetCard) ? a.gap : 0;
				this.mLastSlab = this.CreateWorldEntity(Blocks).Setup(d + c, a.height + 300, "block", a.length, "road");
				if (a.stack === true) {
					this.mLastSlab.allowStacking = true
				}
				if (a.checkpoint === true) {
					this.mLastSlab.checkpoint = true
				}
				if (a.trackEnd === true) {
					this.mLastSlab.trackEnd = true
				}
				this.blocks.push(this.mLastSlab);
				this.justResetCard = false;
				if (a.objects) {
					this.generateObjects(a.objects, this.mLastSlab)
				}
				break;
			default:
				break
		}
	},
	processEvents: function(c) {
		var e = true;
		if (this.mLastSlab) {
			if (this.mLastSlab.allowStacking) {
				e = true
			} else {
				var g = this.mLastSlab.worldPosition.x + this.mLastSlab.mWidth;
				var a = this.ScreenX(g);
				var f = (a - this.Width()) / this.Width();
				e = f < 0.1
			}
		}
		if (e) {
			var d = this.mLevelEvents === null ? null : this.mLevelEvents[this.mCurrentLevelEventIndex];
			if (d != null) {
				this.processLevelEvent(d);
				this.mCurrentLevelEventIndex++
			} else {
				if (!this.insertedCheckpoint) {
					this.processLevelEvent(this.checkPointEvent);
					this.insertedCheckpoint = true
				} else {
					this.mCurrentCardIndex++;
					this.mCurrentLevel = this.mCurrentCardIndex;
					if (this.mCurrentCardIndex < this.mCards.length) {
						this.loadCard(this.mCards[this.mCurrentCardIndex])
					}
				}
			}
		}
	},
	generateObjects: function(e, f) {
		var h = f.mWidth / (e.length + 1);
		var a = f.worldPosition.x + h;
		var g = f.worldPosition.y;
		for (var c = 0; c < e.length; c++) {
			var d = e.charAt(c);
			if (d === "G" || d === "P" || d === "W" || d === "B" || d === "J" || d === "D" || d === "T") {
				g = f.worldPosition.y + 0;
				this.CreateWorldEntity(Powerup).Setup(a, g, d, "objects")
			}
			if (d === "R" || d === "O" || d === "M" || d === "E") {
				g = f.worldPosition.y - 17;
				switch (d) {
					case "R":
						break;
					case "O":
						break;
					case "M":
						break;
					case "E":
						break
				}
				this.CreateWorldEntity(Obstacle).Setup(a, g, d, "objects")
			}
			a += h
		}
	},
	incPlayerDistance: function(a) {
		this.awardPoints(a / 50)
	},
	awardPoints: function(d) {
		if (this.lives <= 0) {
			return
		}
		var c = this.score;
		var a = this.noCollisionScore;
		this.score += d;
		this.noCollisionScore += d;
		if (a < this.blueRemixScore && this.noCollisionScore >= this.blueRemixScore) {
			this.achievements.earnedAchievement("bremix")
		}
		if (c < this.bestScore && this.getScore() >= this.bestScore) {
			this.DisplayAchievementNotification("NEW HIGHSCORE!")
		}
	},
	achievementPopup: function(c) {
		var a = this.mPlayer.y > (this.Height() * 0.6) ? this.Height() * 0.1 : this.Height() * 0.9;
		if (this.mAchievementPopup === null) {
			this.mAchievementPopup = this.CreateUIEntity(TGE.ScreenEntity).Setup(this.Width() / 2, a, "achievement_popup", "UI");
			this.mAchievementMessage = this.CreateUIEntity(TGE.Text).Setup(this.Width() / 2 + 20, a + 12, c.name, "bold 26px Arial", "center", "middle", "#333", "UI");
			this.mAchievementPopupIcon = new TGE.Sprite();
			this.mAchievementPopupIcon.setImage(c.imageID);
			this.mAchievementPopup.addChild(this.mAchievementPopupIcon);
			this.mAchievementPopupIcon.x = -98
		} else {
			this.mAchievementMessage.text = c.name;
			this.mAchievementPopupIcon.setImage(c.imageID)
		}
		this.mAchievementPopupTimer = 5
	},
	DisplayAchievementNotification: function(a) {},
	DisplayStartMessage: function(r) {
		var q = this.Width() / 2;
		var p;
		var s;
		this.mStartMessageDigits = new Array();
		if (r > 0) {
			p = "start_beat_your_score";
			s = this.Height() * 0.15;
			var f = true;
			var o = 38;
			var l = r.toString();
			var h = 24;
			var k = 2;
			var j = l.length * o;
			if (f) {
				var e = Math.floor((l.length - 1) / 3);
				j += e * h
			}
			var d = q + j / 2 + o / 2;
			d -= o;
			d -= 7;
			var a = s + 60;
			var n = 0;
			for (i = l.length - 1; i >= 0; i--) {
				if (f && n == 3) {
					d += k;
					var g = this.CreateUIEntity(TGE.ScreenEntity).Setup(d, a, null, "UI");
					g.setImage("big_digits_comma", 1, 1);
					g.setSpriteIndex(0);
					this.mStartMessageDigits.push(g);
					d -= h;
					n = 0
				}
				var m = this.CreateUIEntity(TGE.ScreenEntity).Setup(d, a, null, "UI");
				m.setImage("big_digits", 1, 10);
				m.setSpriteIndex(l.charCodeAt(i) - 48);
				this.mStartMessageDigits.push(m);
				d -= o;
				n++
			}
		} else {}
		this.mStartMessage = this.CreateUIEntity(TGE.ScreenEntity).Setup(q, s, p, "UI");
		this.mStartMessageTimer = 4
	},
	loseLife: function() {
		this.lives--;
		this.redFlash();
		this.noCollisionScore = 0;
		this.AnalyticCustomEvent("crashed")
	},
	redFlash: function() {
		this.redOverlay.visible = true;
		this.redOverlay.alpha = 0.6;
		if (this.onPhoneGap()) {
			navigator.notification.vibrate(2500)
		}
	},
	oneUp: function() {
		if (this.lives < 5) {
			this.lives++
		}
	},
	getPlayer: function() {
		return this.mPlayer
	},
	getScore: function() {
		return Math.floor(this.score)
	},
	saveSettings: function() {
		var f = new Date();
		var c = 999;
		f.setDate(f.getDate() + c);
		var d = this.audioManager.mMuted ? "1" : "0";
		var e = escape(d) + ((c == null) ? "" : "; expires=" + f.toUTCString());
		document.cookie = "muted=" + e;
		var a = this.showTips ? "1" : "0";
		e = escape(a) + ((c == null) ? "" : "; expires=" + f.toUTCString());
		document.cookie = "tips=" + e
	},
	toggleMute: function() {
		this.audioManager.ToggleMute();
		this.updateSoundButtons();
		this.saveSettings()
	},
	updateSoundButtons: function() {
		if (this.mSoundToggleOff !== null) {
			this.mSoundToggleOff.visible = this.audioManager.mMuted
		}
	},
	playSound: function(a) {},
	playMusic: function() {
		this.audioManager.Play({
			id: "music",
			loop: true
		})
	}
};
extend(VectorRunner, TGE.Game);
GameOver.prototype = new TGE.Screen();
GameOver.prototype.constructor = GameOver;

function GameOver(a) {
	TGE.Screen.call(this, a);
	this.mAd = null;
	this.mBackground;
	return this
}
GameOver.prototype.Setup = function() {
	var k = new TGE.DisplayObjectContainer();
	k.registrationX = k.registrationY = 0;
	k.width = this.Game().Width();
	k.height = this.Game().Height();
	k.backgroundColor = "#000";
	k.alpha = 0.8;
	this.Game().getLayer(this.mScreenManager.mLayerName).addChild(k);
	this.mBackground = this.CreateUIEntity(TGE.ScreenEntity).Setup(this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.51), "parallax_space", this.mScreenManager.mLayerName);
	this.mBackground.scaleX = this.mBackground.scaleY = 3;
	this.mBackground.alpha = 0.7;
	var c = Math.round(this.Game().mGameTime);
	var a = this.Game().getScore();
	if (this.Game().onPhoneGap()) {
		if (navigator.connection.type == Connection.NONE) {
			this.Game().adGameOverURL = "";
			this.Game().adGameReplayURL = ""
		} else {
			this.Game().adGameOverURL = "";
			// this.Game().adGameOverURL += ";key=" + getDistributionPartner();
			// this.Game().adGameOverURL += ";kvenv=" + encodeURIComponent(TGE.BrowserDetect.platform);
			this.Game().adGameReplayURL = "";
			// this.Game().adGameReplayURL += ";key=" + getDistributionPartner();
			// this.Game().adGameReplayURL += ";kvenv=" + encodeURIComponent(TGE.BrowserDetect.platform);
		}
	}
	this.Game().gameAdSessionDuration += c;
	var l = ((this.Game().gameAdSessionDuration >= this.Game().adSessionDuration) && (!this.Game().onPhoneGap() || (this.Game().onPhoneGap() && (navigator.connection.type != Connection.NONE))));
	if (!this.Game().onPhoneGap()) {
		this.CreateUIEntity(TGE.Text).Setup(this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.05), "More tracks coming soon!", "bold 20px Arial", "center", "middle", "#aaa", this.mScreenManager.mLayerName)
	}
	this.DisplayNumber(a, this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.16), "big_digits", 40, "center", true, this.mScreenManager.mLayerName);
	this.CreateUIEntity(TGE.Button).Setup(this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.48), "achievements_menu_button", MainMenu.prototype.showAchievements.bind(this), 1, this.mScreenManager.mLayerName);
	if (this.Game().onPhoneGap() && l) {
		this.CreateUIEntity(TGE.Button).Setup(this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.33), "gameover_tryagain_button", GameOver.prototype.playAgainWithAd.bind(this), 1, this.mScreenManager.mLayerName)
	} else {
		this.CreateUIEntity(TGE.Button).Setup(this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.33), "gameover_tryagain_button", GameOver.prototype.playAgain.bind(this), 1, this.mScreenManager.mLayerName)
	}
	var h = this.mScreenManager.XFromPercentage(0.14);
	var g = this.mScreenManager.YFromPercentage(0.7);
	var j = this.mScreenManager.XFromPercentage(0.17);
	if (this.Game().onPhoneGap() && this.Game().oniOS()) {
		// this.CreateUIEntity(TGE.Button).Setup(h, g, "gameover_twitter_button", GameOver.prototype.shareTwitter.bind(this), 1, this.mScreenManager.mLayerName);
		// h += j;
		// this.CreateUIEntity(TGE.Button).Setup(h, g, "gameover_facebook_button", GameOver.prototype.shareFacebook.bind(this), 1, this.mScreenManager.mLayerName);
		// h += j;
		// this.CreateUIEntity(TGE.Button).Setup(h, g, "gameover_gamecenter_button", GameOver.prototype.lbGameCenter.bind(this), 1, this.mScreenManager.mLayerName);
	} else {
		j = this.mScreenManager.XFromPercentage(0.12);
		h = this.mScreenManager.XFromPercentage(0.1);
		// this.CreateUIEntity(TGE.Button).Setup(h, g, "gameover_twitter_button", GameOver.prototype.shareTwitter.bind(this), 1, this.mScreenManager.mLayerName);
		// h += j;
		// this.CreateUIEntity(TGE.Button).Setup(h, g, "gameover_facebook_button", GameOver.prototype.shareFacebook.bind(this), 1, this.mScreenManager.mLayerName);
		// h += 1.9 * j;
		// this.CreateUIEntity(TGE.Button).Setup(h, g, "gameover_apple_appstore_button", GameOver.prototype.appStoreLink_Apple.bind(this), 1, this.mScreenManager.mLayerName);
		// g += 100;
		// this.CreateUIEntity(TGE.Button).Setup(h, g, "gameover_google_play_button", GameOver.prototype.appStoreLink_Google.bind(this), 1, this.mScreenManager.mLayerName)
	}
	var d = 35;
	var f = this.Game().Width() - 20 - 300;
	var e = this.Game().Height() - 20 - 250;
	// this.mAd = TGE.Advertisement.DisplayAd({
	// 	parentDiv: this.Game().mCanvasDiv,
	// 	adURL: this.Game().adGameOverURL,
	// 	adWidth: 300,
	// 	adHeight: 250,
	// 	x: f,
	// 	y: e
	// });
	this.Game().AnalyticAchievementEvent("score", a);
	this.Game().AnalyticAchievementEvent("max card");
	this.Game().achievements.submitScore(a);
	if (this.Game().onPhoneGap()) {
		if (this.Game().oniOS()) {
			this.Game().gamecenter.reportScore(this.Game().gameCenterLeaderboardID, a)
		}
	}
};
GameOver.prototype.playAgainWithAd = function() {
	this.Game().gameAdSessionDuration = 0;
	if (this.mAd !== null) {
		this.mAd.close()
	}
	if (this.Game().onPhoneGap()) {
		TGE.Advertisement.DisplayChildBrowserAd({
			adURL: this.Game().adGameReplayURL,
			closeCallback: GameOver.prototype.playAgain.bind(this)
		})
	} else {
		// TGE.Advertisement.DisplayModalOverlayAd({
		// 	parentDiv: this.Game().mCanvasDiv,
		// 	adURL: this.Game().adGameReplayURL,
		// 	closeButton: "images/screens/gameover/ad_close.png",
		// 	adWidth: 300,
		// 	adHeight: 250,
		// 	overlayOpacity: 1,
		// 	skipDelay: 0,
		// 	closeCallback: GameOver.prototype.playAgain.bind(this)
		// })
	}
};
GameOver.prototype.playAgain = function() {
	this.Game().playSound("button");
	this.Close();
	this.Game().Replay()
};
GameOver.prototype.lbGameCenter = function() {
	this.Game().gamecenter.showLeaderboard(this.Game().gameCenterLeaderboardID)
};
GameOver.prototype.appStoreLink_Apple = function() {
	this.Game().OpenURL("https://itunes.apple.com/us/app/vector-runner-remix/id582523218?mt=8&uo=4");
	this.Game().AnalyticShareEvent("apple_app_store")
};
GameOver.prototype.appStoreLink_Google = function() {
	this.Game().OpenURL("https://play.google.com/store/apps/details?id=com.tresensa.vectorrunnerremix");
	this.Game().AnalyticShareEvent("google_play_store")
};
GameOver.prototype.shareFacebook = function() {
	var d = "http://bit.ly/QLRUtM";
	var a = "http://www.facebook.com/sharer.php?u=" + encodeURIComponent(d);
	var e = this.Game().getScore();
	var c = "I just scored " + e + " playing the new free online html5 game Vector Runner Remix. Can you beat that?";
	if (this.Game().onPhoneGap() && this.Game().oniOS()) {
		FB.login(function(f) {
			if (f.session) {} else {}
		}, {
			scope: "email"
		});
		FB.ui({
			method: "feed",
			name: "Vector Runner Remix",
			caption: "Beat my score",
			description: c,
			link: d,
			picture: "./assets-1.1.4/images/web-image.jpg"
		}, function(f) {})
	} else {
		this.Game().OpenURL(a)
	}
	this.Game().AnalyticShareEvent("facebook")
};
GameOver.prototype.shareTwitter = function() {
	var a = "http://bit.ly/QLRUtM";
	var d = this.Game().getScore();
	var c = "I just scored " + d + " playing the free #html5 #mobilegame Vector Runner Remix, @VectorRemixGame. Can you beat that?";
	if (this.Game().onPhoneGap() && this.Game().oniOS()) {
		c = decodeURIComponent(c);
		window.plugins.twitter.composeTweet(null, null, c, {
			urlAttach: a
		})
	} else {
		this.Game().OpenURL("http://twitter.com/home?status=" + encodeURIComponent(c + " " + a))
	}
	this.Game().AnalyticShareEvent("twitter")
};
GameOver.prototype.shareKik = function() {
	cards.kik.send({
		title: "Vector Runner Remix",
		text: "I just scored " + this.Game().getScore() + " playing Vector Runner Remix. Can you beat that?"
	});
	this.Game().AnalyticShareEvent("kik")
};
GameOver.prototype.showAchievements = function() {
	if (this.mAd !== null) {
		this.mAd.close()
	}
	this.Game().ShowScreen(AchievementsScreen)
};
GameOver.prototype.Destroy = function() {
	if (this.mAd !== null) {
		this.mAd.close()
	}
	this.Game().getLayer(this.mScreenManager.mLayerName).removeChild(this.mBackground);
	TGE.Screen.prototype.Destroy.call(this)
};
LoadingScreen.prototype = new TGE.Screen();
LoadingScreen.prototype.constructor = LoadingScreen;

function LoadingScreen(a) {
	TGE.Screen.call(this, a);
	this.mLoadingText = null;
	return this
}
LoadingScreen.prototype.Setup = function() {
	this.FillBackground("#000");
	this.mLoadingText = this.CreateUIEntity(TGE.Text).Setup(this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.5), "LOADING 0%", "bold italic 40px Arial", "center", "middle", "#fff", this.mScreenManager.mLayerName)
};
LoadingScreen.prototype.UpdateProgress = function(c) {
	var a = "LOADING " + Math.round(c * 100).toString() + "%";
	this.mLoadingText.text = a
};
MainMenu.prototype = new TGE.Screen();
MainMenu.prototype.constructor = MainMenu;

function MainMenu(a) {
	TGE.Screen.call(this, a);
	return this
}
MainMenu.className = function() {
	return "MainMenu"
};
MainMenu.prototype.Setup = function() {
	this.FillBackground("#000");
	this.Game().mCameraLocation.x = 0;
	this.Game().mCameraLocation.y = 0;
	var e = (this.Game()._mNativeScaling == null ? 1 : this.Game()._mNativeScaling.y);
	var d = this.Game().CreateWorldEntity(TGE.ParallaxPane).Setup(300 * e, 200, "parallax_space", this.mScreenManager.mLayerName);
	d.scaleX = 3;
	d.scaleY = 3 * e;
	this.mBackground = new TGE.DisplayObjectContainer();
	this.mBackground.registrationX = this.mBackground.registrationY = 0;
	this.mBackground.width = this.Game().Width();
	this.mBackground.height = this.Game().Height();
	this.mBackground.backgroundColor = "#000";
	this.mBackground.alpha = 0.4;
	this.Game().getLayer(this.mScreenManager.mLayerName).addChild(this.mBackground);
	this.CreateUIEntity(TGE.ScreenEntity).Setup(this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.28), "logo", this.mScreenManager.mLayerName);
	var c = this.CreateUIEntity(TGE.Button).Setup(this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.6), "mainmenu_play_button", MainMenu.prototype.playGame.bind(this), 1, this.mScreenManager.mLayerName);
	this.CreateUIEntity(TGE.Button).Setup(this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.78), "achievements_menu_button", MainMenu.prototype.showAchievements.bind(this), 1, this.mScreenManager.mLayerName);
	var f = this.mScreenManager.FixedDistanceFromBottom(50);
	var a = this.CreateUIEntity(TGE.Button).Setup(this.mScreenManager.XFromPercentage(0.18), f, "dyog_plug", MainMenu.prototype.dyogPlug.bind(this), 1, this.mScreenManager.mLayerName);
	a.alpha = 0.5;
	f = this.mScreenManager.FixedDistanceFromBottom(85);
	a = this.CreateUIEntity(TGE.Button).Setup(this.mScreenManager.XFromPercentage(0.87), f, "tresensa_plug", MainMenu.prototype.tresensaPlug.bind(this), 1, this.mScreenManager.mLayerName);
	a.alpha = 0.5
};
MainMenu.prototype.Update = function(d) {
	TGE.Screen.prototype.Update.call(this, d);
	var c = this.Game();
	var a = c.CameraLocation().x;
	c.mCameraLocation.x = a + d
};
MainMenu.prototype.playGame = function() {
	this.Close();
	this.Game().PlayGame()
};
MainMenu.prototype.showAchievements = function() {
	TGE.Achievements.ShowAchievementsScreen(TGE.Game.prototype.ShowScreen.bind(this.Game(), AchievementsScreen))
};
MainMenu.prototype.tresensaPlug = function() {
	this.Game().OpenURL("")
};
MainMenu.prototype.dyogPlug = function() {
	var a = TGE.BrowserDetect.platform === "iPad" || TGE.BrowserDetect.platform === "iPhone" ? "http://www.digyourowngrave.com/category/html5/" : "http://www.digyourowngrave.com";
	this.Game().OpenURL(a)
};
PauseScreen = function(a) {
	PauseScreen.superclass.constructor.call(this, a);
	return this
};
PauseScreen.className = function() {
	return "PauseScreen"
};
PauseScreen.prototype = {
	Setup: function() {
		this.mBackground = new TGE.DisplayObjectContainer();
		this.mBackground.registrationX = this.mBackground.registrationY = 0;
		this.mBackground.width = this.Game().Width();
		this.mBackground.height = this.Game().Height();
		this.mBackground.backgroundColor = "#000";
		this.mBackground.alpha = 0.85;
		this.Game().getLayer(this.mScreenManager.mLayerName).addChild(this.mBackground);
		this.CreateUIEntity(TGE.Button).Setup(this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.25), "pausescreen_resume_button", PauseScreen.prototype.resumeGame.bind(this), 1, this.mScreenManager.mLayerName);
		this.CreateUIEntity(TGE.Button).Setup(this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.5), "pausescreen_restart_button", PauseScreen.prototype.restartGame.bind(this), 1, this.mScreenManager.mLayerName);
		this.CreateUIEntity(TGE.Button).Setup(this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.75), "pausescreen_mainmenu_button", PauseScreen.prototype.gotoMainMenu.bind(this), 1, this.mScreenManager.mLayerName);
		this.wasMuted = this.Game().audioManager.mMuted;
		this.Game().audioManager.Mute()
	},
	resumeGame: function() {
		if (!this.wasMuted) {
			this.Game().audioManager.Unmute()
		}
		this.Game().PauseGame(false)
	},
	restartGame: function() {
		if (!this.wasMuted) {
			this.Game().audioManager.Unmute()
		}
		this.Close();
		this.Game().Replay()
	},
	gotoMainMenu: function() {
		if (!this.wasMuted) {
			this.Game().audioManager.Unmute()
		}
		this.Game().GotoMainMenu()
	},
	Destroy: function() {
		this.Game().getLayer(this.mScreenManager.mLayerName).removeChild(this.mBackground);
		PauseScreen.superclass.Destroy.call(this)
	}
};
extend(PauseScreen, TGE.Screen);
TutorialScreen = function(a) {
	TutorialScreen.superclass.constructor.call(this, a);
	this.mBackground = null;
	this.mImageBackground = null;
	return this
};
TutorialScreen.className = function() {
	return "TutorialScreen"
};
TutorialScreen.prototype = {
	Setup: function() {
		this.mBackground = new TGE.DisplayObjectContainer();
		this.mBackground.registrationX = this.mBackground.registrationY = 0;
		this.mBackground.width = this.Game().Width();
		this.mBackground.height = this.Game().Height();
		this.mBackground.backgroundColor = "#000";
		this.mBackground.alpha = 0.85;
		this.Game().getLayer(this.mScreenManager.mLayerName).addChild(this.mBackground);
		this.CreateUIEntity(TGE.Button).Setup(this.mScreenManager.XFromPercentage(0.85), this.mScreenManager.YFromPercentage(0.91), "tutorial_continue", TutorialScreen.prototype.resumeGame.bind(this), 1, this.mScreenManager.mLayerName);
		this.CreateUIEntity(TGE.Button).Setup(this.mScreenManager.XFromPercentage(0.16), this.mScreenManager.YFromPercentage(0.91), "tutorial_notips", TutorialScreen.prototype.disableTips.bind(this), 1, this.mScreenManager.mLayerName)
	},
	setTutorial: function(c) {
		var a = this.mScreenManager.XFromPercentage(0.5);
		var d = this.mScreenManager.YFromPercentage(0.38);
		this.mImageBackground = new TGE.DisplayObjectContainer();
		this.mImageBackground.width = this.mImageBackground.height = 270;
		this.mImageBackground.backgroundColor = "#fff";
		this.mImageBackground.alpha = 0.1;
		this.mImageBackground.x = a;
		this.mImageBackground.y = d;
		this.Game().getLayer(this.mScreenManager.mLayerName).addChild(this.mImageBackground);
		this.CreateUIEntity(TGE.ScreenEntity).Setup(a, d, c, this.mScreenManager.mLayerName);
		if (this.Game().assetManager.getImage(c + "_caption", false) != null) {
			this.CreateUIEntity(TGE.ScreenEntity).Setup(a, d + 170, c + "_caption", this.mScreenManager.mLayerName)
		}
	},
	resumeGame: function() {
		this.Close();
		this.Game().freezeGameplay(false)
	},
	disableTips: function() {
		this.Game().disableTips();
		this.resumeGame()
	},
	Destroy: function() {
		this.Game().getLayer(this.mScreenManager.mLayerName).removeChild(this.mBackground);
		this.Game().getLayer(this.mScreenManager.mLayerName).removeChild(this.mImageBackground);
		TutorialScreen.superclass.Destroy.call(this)
	}
};
extend(TutorialScreen, TGE.Screen);
AchievementsScreen = function(a) {
	AchievementsScreen.superclass.constructor.call(this, a);
	this.mBackground = null;
	return this
};
AchievementsScreen.className = function() {
	return "AchievementsScreen"
};
AchievementsScreen.prototype = {
	Setup: function() {
		this.mBackground = new TGE.DisplayObjectContainer();
		this.mBackground.registrationX = this.mBackground.registrationY = 0;
		this.mBackground.width = this.Game().Width();
		this.mBackground.height = this.Game().Height();
		this.mBackground.backgroundColor = "#000";
		this.mBackground.mouseEnabled = true;
		this.Game().getLayer(this.mScreenManager.mLayerName).addChild(this.mBackground);
		this.CreateUIEntity(TGE.Button).Setup(this.mScreenManager.XFromPercentage(0.5), this.mScreenManager.YFromPercentage(0.85), "achievements_back_button", AchievementsScreen.prototype.Close.bind(this), 1, this.mScreenManager.mLayerName);
		var g = this.Game().achievements.numberOfAchievements();
		var j = 0.15;
		var h = 0.25;
		var f = 0.5 - (g * j) / 2;
		for (var d = 0; d < g; d++) {
			var c = this.Game().achievements.getAchievementAt(d);
			if (c) {
				var e = c.hasBeenEarned() ? c.imageID : this.Game().achievements.lockedIconID;
				this.CreateUIEntity(TGE.ScreenEntity).Setup(this.mScreenManager.XFromPercentage(h), this.mScreenManager.YFromPercentage(f), e, this.mScreenManager.mLayerName);
				this.CreateUIEntity(TGE.Text).Setup(this.mScreenManager.XFromPercentage(h + 0.04), this.mScreenManager.YFromPercentage(f), c.name.toUpperCase() + "  -  " + c.description, "20px Arial", "left", "middle", "#aaa", this.mScreenManager.mLayerName);
				f += j
			}
		}
	},
	Destroy: function() {
		this.Game().getLayer(this.mScreenManager.mLayerName).removeChild(this.mBackground);
		AchievementsScreen.superclass.Destroy.call(this)
	}
};
extend(AchievementsScreen, TGE.Screen);